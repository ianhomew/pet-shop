{
  "contractName": "NFTokenMetadata",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_approved",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_operator",
          "type": "address"
        },
        {
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "_name",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "_symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Optional metadata implementation for ERC-721 non-fungible token standard.\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. This function can be changed to payable.\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\",\"_tokenId\":\"ID of the token to be approved.\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.\",\"params\":{\"_owner\":\"Address for whom to query the balance.\"},\"return\":\"Balance of _owner.\"},\"constructor\":{\"details\":\"Contract constructor.\"},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\"},\"return\":\"Address that _tokenId is approved for. \"},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\",\"_owner\":\"The address that owns the NFTs.\"},\"return\":\"True if approved for all, false otherwise.\"},\"name()\":{\"details\":\"Returns a descriptive name for a collection of NFTokens.\",\"return\":\"Representing name. \"},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\"},\"return\":\"Address of _tokenId owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\",\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\",\"_operator\":\"Address to add to the set of authorized operators.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Function to check which interfaces are suported by this contract.\",\"params\":{\"_interfaceID\":\"Id of the interface.\"},\"return\":\"True if _interfaceID is supported, false otherwise.\"},\"symbol()\":{\"details\":\"Returns an abbreviated name for NFTokens.\",\"return\":\"Representing symbol. \"},\"tokenURI(uint256)\":{\"details\":\"A distinct URI (RFC 3986) for a given NFT.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\"},\"constructor\":\"When implementing this contract don't forget to set nftName and nftSymbol.\",\"getApproved(uint256)\":{\"notice\":\"Throws if `_tokenId` is not a valid NFT.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"This works identically to the other function with an extra data parameter, except this function just sets data to \\\"\\\"\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost.\"}}}},\"settings\":{\"compilationTarget\":{\"@0xcert/ethereum-erc721/src/contracts/tokens/nf-token-metadata.sol\":\"NFTokenMetadata\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@0xcert/ethereum-erc721/src/contracts/math/safe-math.sol\":{\"keccak256\":\"0x2de2508ddfd5391d14292a745ae96d85c6f710bbec3c280038e8f591d4643b8f\",\"urls\":[\"bzzr://3e80a996979766e4c552eb34c72bde6ebaa56e5649c90285a55609a93c7a41a3\"]},\"@0xcert/ethereum-erc721/src/contracts/tokens/erc721-metadata.sol\":{\"keccak256\":\"0xe767537fa32f8a3a4f86eb35e81e9d38b2442afded0eb56022eec80222f4712e\",\"urls\":[\"bzzr://c84f32f2892010b33d1b4f3ecc180eb829cc32c7c653b37d51c3d29af174ba17\"]},\"@0xcert/ethereum-erc721/src/contracts/tokens/erc721-token-receiver.sol\":{\"keccak256\":\"0x472e520e291772c747b13c9a7ef1c985ce8d79810ac3b63ef44cbf5939fec92c\",\"urls\":[\"bzzr://ee2650665d1d3a2b98f8b96004adf5329e006801ff8b05e0541bc7d01153eeea\"]},\"@0xcert/ethereum-erc721/src/contracts/tokens/erc721.sol\":{\"keccak256\":\"0x8aca1d2db3210e695c1a6be3df517e7370f47ebf340751f4f4c74c78ae8e82bc\",\"urls\":[\"bzzr://ad83a4a119a99bfce9ba5c0d2f529de7d010206c5beef0017c836ab3be6ddd80\"]},\"@0xcert/ethereum-erc721/src/contracts/tokens/nf-token-metadata.sol\":{\"keccak256\":\"0x70b855ccf0fc03aada0953211b2ed77a25e98e2ccd22a150f48646a6647b399a\",\"urls\":[\"bzzr://f7ad684c93cf628df2bd807708ecbdd7c95d8eda37fa74a52f2175b5e49b63e7\"]},\"@0xcert/ethereum-erc721/src/contracts/tokens/nf-token.sol\":{\"keccak256\":\"0x5122c85ddeead9cf309472ca9f9fe914bb6d03f2dc8c4b621cf2a6908453ec45\",\"urls\":[\"bzzr://c6967b6889e7f349f2ed08736736d8ea46c9e440518d6ccbec8b8e3e2bb0868d\"]},\"@0xcert/ethereum-erc721/src/contracts/utils/address-utils.sol\":{\"keccak256\":\"0xcb3882e392740906cdccde8a0bde1bfd6196a54d6eb4ecfb2409e92dfa0ab773\",\"urls\":[\"bzzr://a6dc2f5388d7443d9473b2ec8ae53d3ec776f37e4cf807e5f2fadb25b7625e0d\"]},\"@0xcert/ethereum-erc721/src/contracts/utils/erc165.sol\":{\"keccak256\":\"0xefa117307212ceeec08547fdf899e72d0ef1791bd662cd90ac71124c90a3b440\",\"urls\":[\"bzzr://3b794fd6353b6efe1c6067e995e66a1864efb5333b94170f5ea1ec4b6ca893a3\"]},\"@0xcert/ethereum-erc721/src/contracts/utils/supports-interface.sol\":{\"keccak256\":\"0xd0d163c85ad038fbc26da9368a36324b357faa3050ac79866cb2722219506519\",\"urls\":[\"bzzr://84ae925338efd1538ab2a2484f53c4791b0c8ddbe9d727066c9526e04b7380d9\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100bf576000357c01000000000000000000000000000000000000000000000000000000009004806301ffc9a7146100c457806306fdde0314610136578063081812fc146101c6578063095ea7b31461024157806323b872dd1461029c57806342842e0e146103175780636352211e1461039257806370a082311461040d57806395d89b4114610472578063a22cb46514610502578063b88d4fde1461055f578063c87b56dd1461062f578063e985e9c5146106e3575b600080fd5b3480156100d057600080fd5b5061011c600480360360208110156100e757600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061076c565b604051808215151515815260200191505060405180910390f35b34801561014257600080fd5b5061014b6107d3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018b578082015181840152602081019050610170565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d257600080fd5b506101ff600480360360208110156101e957600080fd5b8101908080359060200190929190505050610875565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024d57600080fd5b5061029a6004803603604081101561026457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610923565b005b3480156102a857600080fd5b50610315600480360360608110156102bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bbf565b005b34801561032357600080fd5b506103906004803603606081101561033a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e5d565b005b34801561039e57600080fd5b506103cb600480360360208110156103b557600080fd5b8101908080359060200190929190505050610e7e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041957600080fd5b5061045c6004803603602081101561043057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ef7565b6040518082815260200191505060405180910390f35b34801561047e57600080fd5b50610487610f44565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104c75780820151818401526020810190506104ac565b50505050905090810190601f1680156104f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561050e57600080fd5b5061055d6004803603604081101561052557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610fe6565b005b34801561056b57600080fd5b5061062d6004803603608081101561058257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156105e957600080fd5b8201836020820111156105fb57600080fd5b8035906020019184600183028401116401000000008311171561061d57600080fd5b90919293919293905050506110e7565b005b34801561063b57600080fd5b506106686004803603602081101561065257600080fd5b810190808035906020019092919050505061113e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106a857808201518184015260208101905061068d565b50505050905090810190601f1680156106d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106ef57600080fd5b506107526004803603604081101561070657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611264565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561086b5780601f106108405761010080835404028352916020019161086b565b820191906000526020600020905b81548152906001019060200180831161084e57829003601f168201915b5050505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156108e757600080fd5b6002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b8060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610a1c5750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610a2757600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610a9757600080fd5b60006001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515610b0a57600080fd5b856002600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b8060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610c9057503373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610d215750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610d2c57600080fd5b82600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610d9c57600080fd5b60006001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610e0e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515610e4a57600080fd5b610e5486866112f8565b50505050505050565b610e7983838360206040519081016040528060008152506113ad565b505050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ef257600080fd5b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610f3457600080fd5b610f3d82611864565b9050919050565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fdc5780601f10610fb157610100808354040283529160200191610fdc565b820191906000526020600020905b815481529060010190602001808311610fbf57829003601f168201915b5050505050905090565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b61113785858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506113ad565b5050505050565b606081600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156111b057600080fd5b600760008481526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112575780601f1061122c57610100808354040283529160200191611257565b820191906000526020600020905b81548152906001019060200180831161123a57829003601f168201915b5050505050915050919050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611339826118ad565b6113438183611950565b61134d8383611a7d565b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b8160006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061147e57503373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8061150f5750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561151a57600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561158a57600080fd5b60006001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156115fc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561163857600080fd5b61164287876112f8565b6116618773ffffffffffffffffffffffffffffffffffffffff16611bd7565b1561185a5760008773ffffffffffffffffffffffffffffffffffffffff1663150b7a02338b8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561175d578082015181840152602081019050611742565b50505050905090810190601f16801561178a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156117ac57600080fd5b505af11580156117c0573d6000803e3d6000fd5b505050506040513d60208110156117d657600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561185857600080fd5b505b5050505050505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561194d576002600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b50565b8173ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119bd57600080fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611aeb57600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b906001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bea90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080823b905060008111915050919050565b60008183019050828110151515611c0057600080fd5b9291505056fea165627a7a72305820c68f05edda2fea99d7a82a7532e5a7839f797e5913a3510ba5b393a95b3fa7e20029",
  "sourceMap": "172:2325:4:-;;;654:94;8:9:-1;5:2;;;30:1;27;20:12;5:2;654:94:4;455:4:8;421:19;:31;441:10;421:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;3917:4:5;3883:19;:31;3903:10;3883:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;721:4:4;687:19;:31;707:10;687:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;172:2325;;;;;;",
  "deployedSourceMap": "172:2325:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;677:150:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;677:150:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;677:150:8;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;864:100:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;864:100:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;864:100:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8855:161:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8855:161:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8855:161:5;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6816:316;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6816:316:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6816:316:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6104:300;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6104:300:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6104:300:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5381:157;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5381:157:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5381:157:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8448:170;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8448:170:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8448:170:5;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8030:167;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8030:167:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8030:167:5;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1067:108:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1067:108:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1067:108:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7534:210:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7534:210:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7534:210:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4796:186;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4796:186:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;4796:186:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4796:186:5;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4796:186:5;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4796:186:5;;;;;;;;;;;;:::i;:::-;;1321:158:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1321:158:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1321:158:4;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1321:158:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9277:169:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9277:169:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9277:169:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;677:150:8;768:4;789:19;:33;809:12;789:33;;;;;;;;;;;;;;;;;;;;;;;;;;;782:40;;677:150;;;:::o;864:100:4:-;915:19;952:7;944:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;864:100;:::o;8855:161:5:-;8964:7;8941:8;3787:1;3756:33;;:9;:19;3766:8;3756:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3748:42;;;;;;;;8988:13;:23;9002:8;8988:23;;;;;;;;;;;;;;;;;;;;;8981:30;;8855:161;;;;:::o;6816:316::-;6910:8;3051:18;3072:9;:19;3082:8;3072:19;;;;;;;;;;;;;;;;;;;;;3051:40;;3119:10;3105:24;;:10;:24;;;:68;;;;3133:16;:28;3150:10;3133:28;;;;;;;;;;;;;;;:40;3162:10;3133:40;;;;;;;;;;;;;;;;;;;;;;;;;3105:68;3097:77;;;;;;;;6937:8;3787:1;3756:33;;:9;:19;3766:8;3756:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3748:42;;;;;;;;6955:18;6976:9;:19;6986:8;6976:19;;;;;;;;;;;;;;;;;;;;;6955:40;;7022:10;7009:23;;:9;:23;;;;7001:32;;;;;;;;7066:9;7040:13;:23;7054:8;7040:23;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;7118:8;7107:9;7086:41;;7095:10;7086:41;;;;;;;;;;;;3796:1;3180;6816:316;;;;:::o;6104:300::-;6217:8;3375:18;3396:9;:19;3406:8;3396:19;;;;;;;;;;;;;;;;;;;;;3375:40;;3450:10;3436:24;;:10;:24;;;:71;;;;3497:10;3470:37;;:13;:23;3484:8;3470:23;;;;;;;;;;;;;;;;;;;;;:37;;;3436:71;:121;;;;3517:16;:28;3534:10;3517:28;;;;;;;;;;;;;;;:40;3546:10;3517:40;;;;;;;;;;;;;;;;;;;;;;;;;3436:121;3421:142;;;;;;;;6244:8;3787:1;3756:33;;:9;:19;3766:8;3756:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3748:42;;;;;;;;6262:18;6283:9;:19;6293:8;6283:19;;;;;;;;;;;;;;;;;;;;;6262:40;;6330:5;6316:19;;:10;:19;;;6308:28;;;;;;;;6365:1;6350:17;;:3;:17;;;;6342:26;;;;;;;;6375:24;6385:3;6390:8;6375:9;:24::i;:::-;3796:1;3569;6104:300;;;;;:::o;5381:157::-;5490:43;5508:5;5515:3;5520:8;5490:43;;;;;;;;;;;;;:17;:43::i;:::-;5381:157;;;:::o;8448:170::-;8526:14;8559:9;:19;8569:8;8559:19;;;;;;;;;;;;;;;;;;;;;8550:28;;8610:1;8592:20;;:6;:20;;;;8584:29;;;;;;;;8448:170;;;:::o;8030:167::-;8108:7;8151:1;8133:20;;:6;:20;;;;8125:29;;;;;;;;8167:25;8185:6;8167:17;:25::i;:::-;8160:32;;8030:167;;;:::o;1067:108:4:-;1120:21;1161:9;1151:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1067:108;:::o;7534:210:5:-;7671:9;7629:16;:28;7646:10;7629:28;;;;;;;;;;;;;;;:39;7658:9;7629:39;;;;;;;;;;;;;;;;:51;;;;;;;;;;;;;;;;;;7718:9;7691:48;;7706:10;7691:48;;;7729:9;7691:48;;;;;;;;;;;;;;;;;;;;;;7534:210;;:::o;4796:186::-;4931:46;4949:5;4956:3;4961:8;4971:5;;4931:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;4931:46:5;;;;;;:17;:46::i;:::-;4796:186;;;;;:::o;1321:158:4:-;1427:13;1404:8;3787:1:5;3756:33;;:9;:19;3766:8;3756:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3748:42;;;;;;;;1457:7:4;:17;1465:8;1457:17;;;;;;;;;;;1450:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1321:158;;;;:::o;9277:169:5:-;9385:4;9406:16;:24;9423:6;9406:24;;;;;;;;;;;;;;;:35;9431:9;9406:35;;;;;;;;;;;;;;;;;;;;;;;;;9399:42;;9277:169;;;;:::o;9629:262::-;9712:12;9727:9;:19;9737:8;9727:19;;;;;;;;;;;;;;;;;;;;;9712:34;;9752:24;9767:8;9752:14;:24::i;:::-;9783:30;9798:4;9804:8;9783:14;:30::i;:::-;9819:26;9831:3;9836:8;9819:11;:26::i;:::-;9877:8;9872:3;9857:29;;9866:4;9857:29;;;;;;;;;;;;9629:262;;;:::o;12753:520::-;12894:8;3375:18;3396:9;:19;3406:8;3396:19;;;;;;;;;;;;;;;;;;;;;3375:40;;3450:10;3436:24;;:10;:24;;;:71;;;;3497:10;3470:37;;:13;:23;3484:8;3470:23;;;;;;;;;;;;;;;;;;;;;:37;;;3436:71;:121;;;;3517:16;:28;3534:10;3517:28;;;;;;;;;;;;;;;:40;3546:10;3517:40;;;;;;;;;;;;;;;;;;;;;;;;;3436:121;3421:142;;;;;;;;12921:8;3787:1;3756:33;;:9;:19;3766:8;3756:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3748:42;;;;;;;;12939:18;12960:9;:19;12970:8;12960:19;;;;;;;;;;;;;;;;;;;;;12939:40;;13007:5;12993:19;;:10;:19;;;12985:28;;;;;;;;13042:1;13027:17;;:3;:17;;;;13019:26;;;;;;;;13052:24;13062:3;13067:8;13052:9;:24::i;:::-;13087:16;:3;:14;;;:16::i;:::-;13083:186;;;13118:13;13154:3;13134:41;;;13176:10;13188:5;13195:8;13205:5;13134:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13134:77:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13134:77:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13134:77:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13134:77:5;;;;;;;;;;;;;;;;13118:93;;599:10;13237:24;;13227:34;;;:6;:34;;;;13219:43;;;;;;;;13083:186;;3796:1;3569;12753:520;;;;;;:::o;12342:142::-;12428:7;12452:19;:27;12472:6;12452:27;;;;;;;;;;;;;;;;12445:34;;12342:142;;;:::o;13401:166::-;13510:1;13475:37;;:13;:23;13489:8;13475:23;;;;;;;;;;;;;;;;;;;;;:37;;;;13471:92;;;13533:13;:23;13547:8;13533:23;;;;;;;;;;;;13526:30;;;;;;;;;;;13471:92;13401:166;:::o;11338:229::-;11459:5;11436:28;;:9;:19;11446:8;11436:19;;;;;;;;;;;;;;;;;;;;;:28;;;11428:37;;;;;;;;11529:1;11500:19;:26;11520:5;11500:26;;;;;;;;;;;;;;;;:30;11471:19;:26;11491:5;11471:26;;;;;;;;;;;;;;;:59;;;;11543:9;:19;11553:8;11543:19;;;;;;;;;;;;11536:26;;;;;;;;;;;11338:229;;:::o;11826:228::-;11950:1;11919:33;;:9;:19;11929:8;11919:19;;;;;;;;;;;;;;;;;;;;;:33;;;11911:42;;;;;;;;11982:3;11960:9;:19;11970:8;11960:19;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;12018:31;12047:1;12018:19;:24;12038:3;12018:24;;;;;;;;;;;;;;;;:28;;:31;;;;:::i;:::-;11991:19;:24;12011:3;11991:24;;;;;;;;;;;;;;;:58;;;;11826:228;;:::o;280:596:6:-;358:17;385:12;811:5;799:18;791:26;;870:1;863:4;:8;848:23;;280:596;;;;:::o;2069:177:0:-;2165:11;2203:8;2192;:19;2186:25;;2232:8;2225:3;:15;;2217:24;;;;;;;;2069:177;;;;:::o",
  "source": "pragma solidity 0.5.1;\n\nimport \"./nf-token.sol\";\nimport \"./erc721-metadata.sol\";\n\n/**\n * @dev Optional metadata implementation for ERC-721 non-fungible token standard.\n */\ncontract NFTokenMetadata is\n  NFToken,\n  ERC721Metadata\n{\n\n  /**\n   * @dev A descriptive name for a collection of NFTs.\n   */\n  string internal nftName;\n\n  /**\n   * @dev An abbreviated name for NFTokens.\n   */\n  string internal nftSymbol;\n\n  /**\n   * @dev Mapping from NFT ID to metadata uri.\n   */\n  mapping (uint256 => string) internal idToUri;\n\n  /**\n   * @dev Contract constructor.\n   * @notice When implementing this contract don't forget to set nftName and nftSymbol.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\n  }\n\n  /**\n   * @dev Returns a descriptive name for a collection of NFTokens.\n   * @return Representing name. \n   */\n  function name()\n    external\n    view\n    returns (string memory _name)\n  {\n    _name = nftName;\n  }\n\n  /**\n   * @dev Returns an abbreviated name for NFTokens.\n   * @return Representing symbol. \n   */\n  function symbol()\n    external\n    view\n    returns (string memory _symbol)\n  {\n    _symbol = nftSymbol;\n  }\n\n  /**\n   * @dev A distinct URI (RFC 3986) for a given NFT.\n   * @param _tokenId Id for which we want uri.\n   * @return URI of _tokenId.\n   */\n  function tokenURI(\n    uint256 _tokenId\n  )\n    external\n    view\n    validNFToken(_tokenId)\n    returns (string memory)\n  {\n    return idToUri[_tokenId];\n  }\n\n  /**\n   * @dev Burns a NFT.\n   * @notice This is a internal function which should be called from user-implemented external\n   * burn function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _tokenId ID of the NFT to be burned.\n   */\n  function _burn(\n    uint256 _tokenId\n  )\n    internal\n  {\n    super._burn(_tokenId);\n\n    if (bytes(idToUri[_tokenId]).length != 0)\n    {\n      delete idToUri[_tokenId];\n    }\n  }\n\n  /**\n   * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\n   * @notice this is a internal function which should be called from user-implemented external\n   * function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _tokenId Id for which we want uri.\n   * @param _uri String representing RFC 3986 URI.\n   */\n  function _setTokenUri(\n    uint256 _tokenId,\n    string memory _uri\n  )\n    internal\n    validNFToken(_tokenId)\n  {\n    idToUri[_tokenId] = _uri;\n  }\n\n}\n",
  "sourcePath": "@0xcert/ethereum-erc721/src/contracts/tokens/nf-token-metadata.sol",
  "ast": {
    "absolutePath": "@0xcert/ethereum-erc721/src/contracts/tokens/nf-token-metadata.sol",
    "exportedSymbols": {
      "NFTokenMetadata": [
        363
      ]
    },
    "id": 364,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 259,
        "literals": [
          "solidity",
          "0.5",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:4"
      },
      {
        "absolutePath": "@0xcert/ethereum-erc721/src/contracts/tokens/nf-token.sol",
        "file": "./nf-token.sol",
        "id": 260,
        "nodeType": "ImportDirective",
        "scope": 364,
        "sourceUnit": 994,
        "src": "24:24:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0xcert/ethereum-erc721/src/contracts/tokens/erc721-metadata.sol",
        "file": "./erc721-metadata.sol",
        "id": 261,
        "nodeType": "ImportDirective",
        "scope": 364,
        "sourceUnit": 142,
        "src": "49:31:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 262,
              "name": "NFToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 993,
              "src": "202:7:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NFToken_$993",
                "typeString": "contract NFToken"
              }
            },
            "id": 263,
            "nodeType": "InheritanceSpecifier",
            "src": "202:7:4"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 264,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 141,
              "src": "213:14:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$141",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 265,
            "nodeType": "InheritanceSpecifier",
            "src": "213:14:4"
          }
        ],
        "contractDependencies": [
          141,
          257,
          993,
          1024,
          1056
        ],
        "contractKind": "contract",
        "documentation": "@dev Optional metadata implementation for ERC-721 non-fungible token standard.",
        "fullyImplemented": true,
        "id": 363,
        "linearizedBaseContracts": [
          363,
          141,
          993,
          1056,
          1024,
          257
        ],
        "name": "NFTokenMetadata",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 267,
            "name": "nftName",
            "nodeType": "VariableDeclaration",
            "scope": 363,
            "src": "300:23:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 266,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "300:6:4",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 269,
            "name": "nftSymbol",
            "nodeType": "VariableDeclaration",
            "scope": 363,
            "src": "384:25:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 268,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "384:6:4",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 273,
            "name": "idToUri",
            "nodeType": "VariableDeclaration",
            "scope": 363,
            "src": "473:44:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
              "typeString": "mapping(uint256 => string)"
            },
            "typeName": {
              "id": 272,
              "keyType": {
                "id": 270,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "482:7:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "473:27:4",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                "typeString": "mapping(uint256 => string)"
              },
              "valueType": {
                "id": 271,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "493:6:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 282,
              "nodeType": "Block",
              "src": "681:67:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 280,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 276,
                        "name": "supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "687:19:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 278,
                      "indexExpression": {
                        "argumentTypes": null,
                        "hexValue": "30783562356531333966",
                        "id": 277,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "707:10:4",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1532892063_by_1",
                          "typeString": "int_const 1532892063"
                        },
                        "value": "0x5b5e139f"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "687:31:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 279,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "721:4:4",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "687:38:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 281,
                  "nodeType": "ExpressionStatement",
                  "src": "687:38:4"
                }
              ]
            },
            "documentation": "@dev Contract constructor.\n@notice When implementing this contract don't forget to set nftName and nftSymbol.",
            "id": 283,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 274,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "665:2:4"
            },
            "returnParameters": {
              "id": 275,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "681:0:4"
            },
            "scope": 363,
            "src": "654:94:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 292,
              "nodeType": "Block",
              "src": "938:26:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 290,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 288,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 286,
                      "src": "944:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 289,
                      "name": "nftName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 267,
                      "src": "952:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "944:15:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 291,
                  "nodeType": "ExpressionStatement",
                  "src": "944:15:4"
                }
              ]
            },
            "documentation": "@dev Returns a descriptive name for a collection of NFTokens.\n@return Representing name. ",
            "id": 293,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 284,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "877:2:4"
            },
            "returnParameters": {
              "id": 287,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 286,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 293,
                  "src": "915:19:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 285,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "915:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "914:21:4"
            },
            "scope": 363,
            "src": "864:100:4",
            "stateMutability": "view",
            "superFunction": 128,
            "visibility": "external"
          },
          {
            "body": {
              "id": 302,
              "nodeType": "Block",
              "src": "1145:30:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 300,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 298,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 296,
                      "src": "1151:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 299,
                      "name": "nftSymbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 269,
                      "src": "1161:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "1151:19:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 301,
                  "nodeType": "ExpressionStatement",
                  "src": "1151:19:4"
                }
              ]
            },
            "documentation": "@dev Returns an abbreviated name for NFTokens.\n@return Representing symbol. ",
            "id": 303,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 294,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1082:2:4"
            },
            "returnParameters": {
              "id": 297,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 296,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 303,
                  "src": "1120:21:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 295,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1120:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1119:23:4"
            },
            "scope": 363,
            "src": "1067:108:4",
            "stateMutability": "view",
            "superFunction": 133,
            "visibility": "external"
          },
          {
            "body": {
              "id": 317,
              "nodeType": "Block",
              "src": "1444:35:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 313,
                      "name": "idToUri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 273,
                      "src": "1457:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                        "typeString": "mapping(uint256 => string storage ref)"
                      }
                    },
                    "id": 315,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 314,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 305,
                      "src": "1465:8:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1457:17:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 312,
                  "id": 316,
                  "nodeType": "Return",
                  "src": "1450:24:4"
                }
              ]
            },
            "documentation": "@dev A distinct URI (RFC 3986) for a given NFT.\n@param _tokenId Id for which we want uri.\n@return URI of _tokenId.",
            "id": 318,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 308,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 305,
                    "src": "1404:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 309,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 307,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 500,
                  "src": "1391:12:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1391:22:4"
              }
            ],
            "name": "tokenURI",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 306,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 305,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 318,
                  "src": "1344:16:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 304,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1344:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1338:26:4"
            },
            "returnParameters": {
              "id": 312,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 311,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 318,
                  "src": "1427:13:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 310,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1427:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1426:15:4"
            },
            "scope": 363,
            "src": "1321:158:4",
            "stateMutability": "view",
            "superFunction": 140,
            "visibility": "external"
          },
          {
            "body": {
              "id": 344,
              "nodeType": "Block",
              "src": "1838:123:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 326,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 320,
                        "src": "1856:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 323,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1296,
                        "src": "1844:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadata_$363",
                          "typeString": "contract super NFTokenMetadata"
                        }
                      },
                      "id": 325,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 827,
                      "src": "1844:11:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 327,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1844:21:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 328,
                  "nodeType": "ExpressionStatement",
                  "src": "1844:21:4"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 336,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 330,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 273,
                              "src": "1882:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 332,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 331,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 320,
                              "src": "1890:8:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1882:17:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          ],
                          "id": 329,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1876:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": "bytes"
                        },
                        "id": 333,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1876:24:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes storage pointer"
                        }
                      },
                      "id": 334,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1876:31:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 335,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1911:1:4",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1876:36:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 343,
                  "nodeType": "IfStatement",
                  "src": "1872:85:4",
                  "trueBody": {
                    "id": 342,
                    "nodeType": "Block",
                    "src": "1918:39:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 340,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "1926:24:4",
                          "subExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 337,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 273,
                              "src": "1933:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 339,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 338,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 320,
                              "src": "1941:8:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1933:17:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 341,
                        "nodeType": "ExpressionStatement",
                        "src": "1926:24:4"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": "@dev Burns a NFT.\n@notice This is a internal function which should be called from user-implemented external\nburn function. Its purpose is to show and properly initialize data structures when using this\nimplementation.\n@param _tokenId ID of the NFT to be burned.",
            "id": 345,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 321,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 320,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 345,
                  "src": "1802:16:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 319,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1802:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1796:26:4"
            },
            "returnParameters": {
              "id": 322,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1838:0:4"
            },
            "scope": 363,
            "src": "1782:179:4",
            "stateMutability": "nonpayable",
            "superFunction": 827,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 361,
              "nodeType": "Block",
              "src": "2459:35:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 359,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 355,
                        "name": "idToUri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 273,
                        "src": "2465:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                          "typeString": "mapping(uint256 => string storage ref)"
                        }
                      },
                      "id": 357,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 356,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 347,
                        "src": "2473:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2465:17:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 358,
                      "name": "_uri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 349,
                      "src": "2485:4:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2465:24:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 360,
                  "nodeType": "ExpressionStatement",
                  "src": "2465:24:4"
                }
              ]
            },
            "documentation": "@dev Set a distinct URI (RFC 3986) for a given NFT ID.\n@notice this is a internal function which should be called from user-implemented external\nfunction. Its purpose is to show and properly initialize data structures when using this\nimplementation.\n@param _tokenId Id for which we want uri.\n@param _uri String representing RFC 3986 URI.",
            "id": 362,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 352,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 347,
                    "src": "2447:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 353,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 351,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 500,
                  "src": "2434:12:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2434:22:4"
              }
            ],
            "name": "_setTokenUri",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 350,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 347,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "2372:16:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 346,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2372:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 349,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "scope": 362,
                  "src": "2394:18:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 348,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2394:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2366:50:4"
            },
            "returnParameters": {
              "id": 354,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2459:0:4"
            },
            "scope": 363,
            "src": "2345:149:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 364,
        "src": "172:2325:4"
      }
    ],
    "src": "0:2498:4"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "@0xcert/ethereum-erc721/src/contracts/tokens/nf-token-metadata.sol",
      "exportedSymbols": {
        "NFTokenMetadata": [
          363
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "0.5",
            ".1"
          ]
        },
        "id": 259,
        "name": "PragmaDirective",
        "src": "0:22:4"
      },
      {
        "attributes": {
          "SourceUnit": 994,
          "absolutePath": "@0xcert/ethereum-erc721/src/contracts/tokens/nf-token.sol",
          "file": "./nf-token.sol",
          "scope": 364,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 260,
        "name": "ImportDirective",
        "src": "24:24:4"
      },
      {
        "attributes": {
          "SourceUnit": 142,
          "absolutePath": "@0xcert/ethereum-erc721/src/contracts/tokens/erc721-metadata.sol",
          "file": "./erc721-metadata.sol",
          "scope": 364,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 261,
        "name": "ImportDirective",
        "src": "49:31:4"
      },
      {
        "attributes": {
          "contractDependencies": [
            141,
            257,
            993,
            1024,
            1056
          ],
          "contractKind": "contract",
          "documentation": "@dev Optional metadata implementation for ERC-721 non-fungible token standard.",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            363,
            141,
            993,
            1056,
            1024,
            257
          ],
          "name": "NFTokenMetadata",
          "scope": 364
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "NFToken",
                  "referencedDeclaration": 993,
                  "type": "contract NFToken"
                },
                "id": 262,
                "name": "UserDefinedTypeName",
                "src": "202:7:4"
              }
            ],
            "id": 263,
            "name": "InheritanceSpecifier",
            "src": "202:7:4"
          },
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "ERC721Metadata",
                  "referencedDeclaration": 141,
                  "type": "contract ERC721Metadata"
                },
                "id": 264,
                "name": "UserDefinedTypeName",
                "src": "213:14:4"
              }
            ],
            "id": 265,
            "name": "InheritanceSpecifier",
            "src": "213:14:4"
          },
          {
            "attributes": {
              "constant": false,
              "name": "nftName",
              "scope": 363,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "string",
              "value": null,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "name": "string",
                  "type": "string"
                },
                "id": 266,
                "name": "ElementaryTypeName",
                "src": "300:6:4"
              }
            ],
            "id": 267,
            "name": "VariableDeclaration",
            "src": "300:23:4"
          },
          {
            "attributes": {
              "constant": false,
              "name": "nftSymbol",
              "scope": 363,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "string",
              "value": null,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "name": "string",
                  "type": "string"
                },
                "id": 268,
                "name": "ElementaryTypeName",
                "src": "384:6:4"
              }
            ],
            "id": 269,
            "name": "VariableDeclaration",
            "src": "384:25:4"
          },
          {
            "attributes": {
              "constant": false,
              "name": "idToUri",
              "scope": 363,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "mapping(uint256 => string)",
              "value": null,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "type": "mapping(uint256 => string)"
                },
                "children": [
                  {
                    "attributes": {
                      "name": "uint256",
                      "type": "uint256"
                    },
                    "id": 270,
                    "name": "ElementaryTypeName",
                    "src": "482:7:4"
                  },
                  {
                    "attributes": {
                      "name": "string",
                      "type": "string"
                    },
                    "id": 271,
                    "name": "ElementaryTypeName",
                    "src": "493:6:4"
                  }
                ],
                "id": 272,
                "name": "Mapping",
                "src": "473:27:4"
              }
            ],
            "id": 273,
            "name": "VariableDeclaration",
            "src": "473:44:4"
          },
          {
            "attributes": {
              "documentation": "@dev Contract constructor.\n@notice When implementing this contract don't forget to set nftName and nftSymbol.",
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "modifiers": [
                null
              ],
              "name": "",
              "scope": 363,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 274,
                "name": "ParameterList",
                "src": "665:2:4"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 275,
                "name": "ParameterList",
                "src": "681:0:4"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "bool"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "type": "bool"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 1033,
                                  "type": "mapping(bytes4 => bool)",
                                  "value": "supportedInterfaces"
                                },
                                "id": 276,
                                "name": "Identifier",
                                "src": "687:19:4"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "hexvalue": "30783562356531333966",
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "subdenomination": null,
                                  "token": "number",
                                  "type": "int_const 1532892063",
                                  "value": "0x5b5e139f"
                                },
                                "id": 277,
                                "name": "Literal",
                                "src": "707:10:4"
                              }
                            ],
                            "id": 278,
                            "name": "IndexAccess",
                            "src": "687:31:4"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "74727565",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "bool",
                              "type": "bool",
                              "value": "true"
                            },
                            "id": 279,
                            "name": "Literal",
                            "src": "721:4:4"
                          }
                        ],
                        "id": 280,
                        "name": "Assignment",
                        "src": "687:38:4"
                      }
                    ],
                    "id": 281,
                    "name": "ExpressionStatement",
                    "src": "687:38:4"
                  }
                ],
                "id": 282,
                "name": "Block",
                "src": "681:67:4"
              }
            ],
            "id": 283,
            "name": "FunctionDefinition",
            "src": "654:94:4"
          },
          {
            "attributes": {
              "documentation": "@dev Returns a descriptive name for a collection of NFTokens.\n@return Representing name. ",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "name",
              "scope": 363,
              "stateMutability": "view",
              "superFunction": 128,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 284,
                "name": "ParameterList",
                "src": "877:2:4"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_name",
                      "scope": 293,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 285,
                        "name": "ElementaryTypeName",
                        "src": "915:6:4"
                      }
                    ],
                    "id": 286,
                    "name": "VariableDeclaration",
                    "src": "915:19:4"
                  }
                ],
                "id": 287,
                "name": "ParameterList",
                "src": "914:21:4"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "string memory"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 286,
                              "type": "string memory",
                              "value": "_name"
                            },
                            "id": 288,
                            "name": "Identifier",
                            "src": "944:5:4"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 267,
                              "type": "string storage ref",
                              "value": "nftName"
                            },
                            "id": 289,
                            "name": "Identifier",
                            "src": "952:7:4"
                          }
                        ],
                        "id": 290,
                        "name": "Assignment",
                        "src": "944:15:4"
                      }
                    ],
                    "id": 291,
                    "name": "ExpressionStatement",
                    "src": "944:15:4"
                  }
                ],
                "id": 292,
                "name": "Block",
                "src": "938:26:4"
              }
            ],
            "id": 293,
            "name": "FunctionDefinition",
            "src": "864:100:4"
          },
          {
            "attributes": {
              "documentation": "@dev Returns an abbreviated name for NFTokens.\n@return Representing symbol. ",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "symbol",
              "scope": 363,
              "stateMutability": "view",
              "superFunction": 133,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 294,
                "name": "ParameterList",
                "src": "1082:2:4"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_symbol",
                      "scope": 303,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 295,
                        "name": "ElementaryTypeName",
                        "src": "1120:6:4"
                      }
                    ],
                    "id": 296,
                    "name": "VariableDeclaration",
                    "src": "1120:21:4"
                  }
                ],
                "id": 297,
                "name": "ParameterList",
                "src": "1119:23:4"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "string memory"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 296,
                              "type": "string memory",
                              "value": "_symbol"
                            },
                            "id": 298,
                            "name": "Identifier",
                            "src": "1151:7:4"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 269,
                              "type": "string storage ref",
                              "value": "nftSymbol"
                            },
                            "id": 299,
                            "name": "Identifier",
                            "src": "1161:9:4"
                          }
                        ],
                        "id": 300,
                        "name": "Assignment",
                        "src": "1151:19:4"
                      }
                    ],
                    "id": 301,
                    "name": "ExpressionStatement",
                    "src": "1151:19:4"
                  }
                ],
                "id": 302,
                "name": "Block",
                "src": "1145:30:4"
              }
            ],
            "id": 303,
            "name": "FunctionDefinition",
            "src": "1067:108:4"
          },
          {
            "attributes": {
              "documentation": "@dev A distinct URI (RFC 3986) for a given NFT.\n@param _tokenId Id for which we want uri.\n@return URI of _tokenId.",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "name": "tokenURI",
              "scope": 363,
              "stateMutability": "view",
              "superFunction": 140,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_tokenId",
                      "scope": 318,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 304,
                        "name": "ElementaryTypeName",
                        "src": "1344:7:4"
                      }
                    ],
                    "id": 305,
                    "name": "VariableDeclaration",
                    "src": "1344:16:4"
                  }
                ],
                "id": 306,
                "name": "ParameterList",
                "src": "1338:26:4"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 318,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 310,
                        "name": "ElementaryTypeName",
                        "src": "1427:6:4"
                      }
                    ],
                    "id": 311,
                    "name": "VariableDeclaration",
                    "src": "1427:13:4"
                  }
                ],
                "id": 312,
                "name": "ParameterList",
                "src": "1426:15:4"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 500,
                      "type": "modifier (uint256)",
                      "value": "validNFToken"
                    },
                    "id": 307,
                    "name": "Identifier",
                    "src": "1391:12:4"
                  },
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 305,
                      "type": "uint256",
                      "value": "_tokenId"
                    },
                    "id": 308,
                    "name": "Identifier",
                    "src": "1404:8:4"
                  }
                ],
                "id": 309,
                "name": "ModifierInvocation",
                "src": "1391:22:4"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 312
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "type": "string storage ref"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 273,
                              "type": "mapping(uint256 => string storage ref)",
                              "value": "idToUri"
                            },
                            "id": 313,
                            "name": "Identifier",
                            "src": "1457:7:4"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 305,
                              "type": "uint256",
                              "value": "_tokenId"
                            },
                            "id": 314,
                            "name": "Identifier",
                            "src": "1465:8:4"
                          }
                        ],
                        "id": 315,
                        "name": "IndexAccess",
                        "src": "1457:17:4"
                      }
                    ],
                    "id": 316,
                    "name": "Return",
                    "src": "1450:24:4"
                  }
                ],
                "id": 317,
                "name": "Block",
                "src": "1444:35:4"
              }
            ],
            "id": 318,
            "name": "FunctionDefinition",
            "src": "1321:158:4"
          },
          {
            "attributes": {
              "documentation": "@dev Burns a NFT.\n@notice This is a internal function which should be called from user-implemented external\nburn function. Its purpose is to show and properly initialize data structures when using this\nimplementation.\n@param _tokenId ID of the NFT to be burned.",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "_burn",
              "scope": 363,
              "stateMutability": "nonpayable",
              "superFunction": 827,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_tokenId",
                      "scope": 345,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 319,
                        "name": "ElementaryTypeName",
                        "src": "1802:7:4"
                      }
                    ],
                    "id": 320,
                    "name": "VariableDeclaration",
                    "src": "1802:16:4"
                  }
                ],
                "id": 321,
                "name": "ParameterList",
                "src": "1796:26:4"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 322,
                "name": "ParameterList",
                "src": "1838:0:4"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "_burn",
                              "referencedDeclaration": 827,
                              "type": "function (uint256)"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 1296,
                                  "type": "contract super NFTokenMetadata",
                                  "value": "super"
                                },
                                "id": 323,
                                "name": "Identifier",
                                "src": "1844:5:4"
                              }
                            ],
                            "id": 325,
                            "name": "MemberAccess",
                            "src": "1844:11:4"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 320,
                              "type": "uint256",
                              "value": "_tokenId"
                            },
                            "id": 326,
                            "name": "Identifier",
                            "src": "1856:8:4"
                          }
                        ],
                        "id": 327,
                        "name": "FunctionCall",
                        "src": "1844:21:4"
                      }
                    ],
                    "id": 328,
                    "name": "ExpressionStatement",
                    "src": "1844:21:4"
                  },
                  {
                    "attributes": {
                      "falseBody": null
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "!=",
                          "type": "bool"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "member_name": "length",
                              "referencedDeclaration": null,
                              "type": "uint256"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "isStructConstructorCall": false,
                                  "lValueRequested": false,
                                  "names": [
                                    null
                                  ],
                                  "type": "bytes storage pointer",
                                  "type_conversion": true
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_string_storage",
                                          "typeString": "string storage ref"
                                        }
                                      ],
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "type": "type(bytes storage pointer)",
                                      "value": "bytes"
                                    },
                                    "id": 329,
                                    "name": "ElementaryTypeNameExpression",
                                    "src": "1876:5:4"
                                  },
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "type": "string storage ref"
                                    },
                                    "children": [
                                      {
                                        "attributes": {
                                          "argumentTypes": null,
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 273,
                                          "type": "mapping(uint256 => string storage ref)",
                                          "value": "idToUri"
                                        },
                                        "id": 330,
                                        "name": "Identifier",
                                        "src": "1882:7:4"
                                      },
                                      {
                                        "attributes": {
                                          "argumentTypes": null,
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 320,
                                          "type": "uint256",
                                          "value": "_tokenId"
                                        },
                                        "id": 331,
                                        "name": "Identifier",
                                        "src": "1890:8:4"
                                      }
                                    ],
                                    "id": 332,
                                    "name": "IndexAccess",
                                    "src": "1882:17:4"
                                  }
                                ],
                                "id": 333,
                                "name": "FunctionCall",
                                "src": "1876:24:4"
                              }
                            ],
                            "id": 334,
                            "name": "MemberAccess",
                            "src": "1876:31:4"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "30",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 0",
                              "value": "0"
                            },
                            "id": 335,
                            "name": "Literal",
                            "src": "1911:1:4"
                          }
                        ],
                        "id": 336,
                        "name": "BinaryOperation",
                        "src": "1876:36:4"
                      },
                      {
                        "children": [
                          {
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "operator": "delete",
                                  "prefix": true,
                                  "type": "tuple()"
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "type": "string storage ref"
                                    },
                                    "children": [
                                      {
                                        "attributes": {
                                          "argumentTypes": null,
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 273,
                                          "type": "mapping(uint256 => string storage ref)",
                                          "value": "idToUri"
                                        },
                                        "id": 337,
                                        "name": "Identifier",
                                        "src": "1933:7:4"
                                      },
                                      {
                                        "attributes": {
                                          "argumentTypes": null,
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 320,
                                          "type": "uint256",
                                          "value": "_tokenId"
                                        },
                                        "id": 338,
                                        "name": "Identifier",
                                        "src": "1941:8:4"
                                      }
                                    ],
                                    "id": 339,
                                    "name": "IndexAccess",
                                    "src": "1933:17:4"
                                  }
                                ],
                                "id": 340,
                                "name": "UnaryOperation",
                                "src": "1926:24:4"
                              }
                            ],
                            "id": 341,
                            "name": "ExpressionStatement",
                            "src": "1926:24:4"
                          }
                        ],
                        "id": 342,
                        "name": "Block",
                        "src": "1918:39:4"
                      }
                    ],
                    "id": 343,
                    "name": "IfStatement",
                    "src": "1872:85:4"
                  }
                ],
                "id": 344,
                "name": "Block",
                "src": "1838:123:4"
              }
            ],
            "id": 345,
            "name": "FunctionDefinition",
            "src": "1782:179:4"
          },
          {
            "attributes": {
              "documentation": "@dev Set a distinct URI (RFC 3986) for a given NFT ID.\n@notice this is a internal function which should be called from user-implemented external\nfunction. Its purpose is to show and properly initialize data structures when using this\nimplementation.\n@param _tokenId Id for which we want uri.\n@param _uri String representing RFC 3986 URI.",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "name": "_setTokenUri",
              "scope": 363,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_tokenId",
                      "scope": 362,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 346,
                        "name": "ElementaryTypeName",
                        "src": "2372:7:4"
                      }
                    ],
                    "id": 347,
                    "name": "VariableDeclaration",
                    "src": "2372:16:4"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_uri",
                      "scope": 362,
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "type": "string",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "string",
                          "type": "string"
                        },
                        "id": 348,
                        "name": "ElementaryTypeName",
                        "src": "2394:6:4"
                      }
                    ],
                    "id": 349,
                    "name": "VariableDeclaration",
                    "src": "2394:18:4"
                  }
                ],
                "id": 350,
                "name": "ParameterList",
                "src": "2366:50:4"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 354,
                "name": "ParameterList",
                "src": "2459:0:4"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 500,
                      "type": "modifier (uint256)",
                      "value": "validNFToken"
                    },
                    "id": 351,
                    "name": "Identifier",
                    "src": "2434:12:4"
                  },
                  {
                    "attributes": {
                      "argumentTypes": null,
                      "overloadedDeclarations": [
                        null
                      ],
                      "referencedDeclaration": 347,
                      "type": "uint256",
                      "value": "_tokenId"
                    },
                    "id": 352,
                    "name": "Identifier",
                    "src": "2447:8:4"
                  }
                ],
                "id": 353,
                "name": "ModifierInvocation",
                "src": "2434:22:4"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "string storage ref"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "type": "string storage ref"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 273,
                                  "type": "mapping(uint256 => string storage ref)",
                                  "value": "idToUri"
                                },
                                "id": 355,
                                "name": "Identifier",
                                "src": "2465:7:4"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 347,
                                  "type": "uint256",
                                  "value": "_tokenId"
                                },
                                "id": 356,
                                "name": "Identifier",
                                "src": "2473:8:4"
                              }
                            ],
                            "id": 357,
                            "name": "IndexAccess",
                            "src": "2465:17:4"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 349,
                              "type": "string memory",
                              "value": "_uri"
                            },
                            "id": 358,
                            "name": "Identifier",
                            "src": "2485:4:4"
                          }
                        ],
                        "id": 359,
                        "name": "Assignment",
                        "src": "2465:24:4"
                      }
                    ],
                    "id": 360,
                    "name": "ExpressionStatement",
                    "src": "2465:24:4"
                  }
                ],
                "id": 361,
                "name": "Block",
                "src": "2459:35:4"
              }
            ],
            "id": 362,
            "name": "FunctionDefinition",
            "src": "2345:149:4"
          }
        ],
        "id": 363,
        "name": "ContractDefinition",
        "src": "172:2325:4"
      }
    ],
    "id": 364,
    "name": "SourceUnit",
    "src": "0:2498:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.1+commit.c8a2cb62.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.4",
  "updatedAt": "2021-12-29T10:56:57.048Z",
  "devdoc": {
    "details": "Optional metadata implementation for ERC-721 non-fungible token standard.",
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.",
          "_tokenId": "ID of the token to be approved."
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
        "params": {
          "_owner": "Address for whom to query the balance."
        },
        "return": "Balance of _owner."
      },
      "constructor": {
        "details": "Contract constructor."
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of."
        },
        "return": "Address that _tokenId is approved for. "
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.",
        "params": {
          "_operator": "The address that acts on behalf of the owner.",
          "_owner": "The address that owns the NFTs."
        },
        "return": "True if approved for all, false otherwise."
      },
      "name()": {
        "details": "Returns a descriptive name for a collection of NFTokens.",
        "return": "Representing name. "
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.",
        "params": {
          "_tokenId": "The identifier for an NFT."
        },
        "return": "Address of _tokenId owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.",
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.",
          "_operator": "Address to add to the set of authorized operators."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Function to check which interfaces are suported by this contract.",
        "params": {
          "_interfaceID": "Id of the interface."
        },
        "return": "True if _interfaceID is supported, false otherwise."
      },
      "symbol()": {
        "details": "Returns an abbreviated name for NFTokens.",
        "return": "Representing symbol. "
      },
      "tokenURI(uint256)": {
        "details": "A distinct URI (RFC 3986) for a given NFT.",
        "params": {
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."
      },
      "constructor": "When implementing this contract don't forget to set nftName and nftSymbol.",
      "getApproved(uint256)": {
        "notice": "Throws if `_tokenId` is not a valid NFT."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "This works identically to the other function with an extra data parameter, except this function just sets data to \"\""
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost."
      }
    }
  }
}